@{
    var isAuthenticated = User.Identity.IsAuthenticated;
}
<h1 style="margin-top: 2rem;">
    入校登記
</h1>

<template>
    <form >
        <div class="row">
            <!-- Left Column -->
            <div class="col-md-4">
                <div class="form-group" v-if="!userIsAuthenticated">
                    <label class="form-label" >校區</label>
                    <select class="form-select" v-model="datas.campusId">
                        <option :value="null">請選擇校區</option>
                        <option v-for="campus in campuses" :value="campus.id">{{ campus.campusName }}</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label">姓名</label>
                    <input type="text" class="form-control" v-model="datas.fullName">
                </div>
                <div class="mb-3">
                    <label class="form-label">電話</label>
                    <input type="text" class="form-control" v-model="$data.datas.phoneNumber">
                </div>
                <div class="mb-3">
                    <label class="form-label">人數</label>
                    <input type="number" class="form-control" v-model.number="datas.numberOfPeople">
                </div>
                <div class="mb-3">
                    <label class="form-label">受訪人</label>
                    <input type="text" class="form-control" v-model="datas.interviewee">
                </div>
            </div>

            <!-- Right Column -->
            <div class="col-md-8">
                <div class="mb-3">
                    <label class="form-label">事由 : </label>
                    @foreach (var option in ViewBag.PurposeOptions)
                    {
                        <label class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" v-model="datas.purpose" :value="@option.Key">
                            <span class="form-check-label" for="reason1">@option.Name</span>
                        </label>
                    }
                    <div class="form-check form-check-inline col">
                        <input type="text" class="form-control" v-model="datas.otherDescription" placeholder="其他說明">
                    </div>
                </div>
                <div class="mb-3">
                    <label class="form-label">備註</label>
                    <textarea class="form-control" v-model="datas.note" rows="3"></textarea>
                </div>
                <div class="mb-3">
                    <label class="form-label">換證號碼</label>
                    <input type="text" class="form-control" v-model="datas.replacementNumber">
                </div>
                <div class="row mb-3">
                    <div class="col-6">
                        <label for="entryTime" class="form-label">入校日期</label>
                        <input type="text" class="form-control" id="entryTime" v-model="entryTime" v-on:change="combineEntryTime">
                        <button type="button" class="btn btn-sm btn-outline-primary" v-on:click="setCurrentDateTime">帶入現在時間</button>
                    </div>
                    <div class="col-4">
                        <label for="entryTime" class="form-label">入校時間</label>
                        <div class="input-group">
                            <input type="number" class="form-control" 
                                   v-model.number="entryHour" v-on:change="combineEntryTime">
                            <input type="number" class="form-control" 
                                   v-model.number="entryMin" v-on:change="combineEntryTime">
                        </div>
                    </div>
                </div>
            </div>
            <button type="button" class="btn btn-primary" v-on:click="submitForm"> 送出</button>
        </div>
    </form>
        <div class="row">
            <table class="table table-striped border mt-2" v-if="userIsAuthenticated">
                <thead>
                    <tr>
                        <th>姓名</th>
                        <th>電話</th>
                        <th>人數</th>
                        <th>受訪人</th>
                        <th>事由</th>
                        <th>備註</th>
                        <th>換證號碼</th>
                        <th>入校時間</th>
                        <th>離校時間</th>
                    </tr>
                </thead>
                <tbody>
                    <tr v-for="log in entryLogs" :key="log.id">
                        <td>{{ log.fullName }}</td>
                        <td>{{ log.phoneNumber }}</td>
                        <td class="text-center">{{ log.numberOfPeople }}</td>
                        <td>{{ log.interviewee }}</td>
                        <td>{{ findPurpose(log.purpose) }}</td>
                        <td>{{ log.note }}</td>
                        <td>{{ log.replacementNumber }}</td>
                        <td>
                            <b>{{ formatDate(log.entryTime) }}</b>
                        </td>
                        <td>
                            <b v-if="log.exitTime">
                                {{ formatDate(log.exitTime) }}
                            </b>
                        <button type="bottom" class="btn btn-danger text-white" v-else v-on:click="submitExitForm(log)">
                                紀錄離校時間
                            </button>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    
</template>


@section scripts{
    <script>
        var isAuthenticated = @isAuthenticated.ToString().ToLower();
    </script>
    <script>
        window.app = new Vue({  
            el: '#app',
            components: {
                //VueNumeric
            },
            watch: {
                'entryHour': function (newVal) {
                    if (newVal < 0) {
                        this.entryHour = 0;
                    } else if (newVal > 23) {
                        this.entryHour = 23;
                    }
                },
                'entryMin': function (newVal)  {
                    if (newVal < 0) {
                        this.entryMin = 0;
                    } else if (newVal > 59) {
                        this.entryMin = 59;
                    }
                }
            },
            data: {
                toast_msg: '',//系統訊息固定 #liveToast
                userIsAuthenticated: isAuthenticated, //用頁面判斷是否為登入
                enums: {
                    purposes: [],
                },
                campuses: [],
                params: {
                    FullName: null,
                    Purpose: null,
                    EntryTimeStart: null,
                    EntryTimeEnd: null,
                    
                },
                entryLogs: [], // 存放返回的 entryLogs
                entryTime: null,
                entryHour: 0,
                entryMin: 0,
                datas:{
                    campusId: 0,
                    phoneNumber: null,
                    fullName: '',
                    numberOfPeople: 0,
                    interviewee: '',//受訪人
                    purpose: '',
                    otherDescription: '',
                    note: '',
                    replacementNumber: '',
                    entryTime: null,
                    exitDate: null,
               }
            },
            methods: {
                toastMsg(msg) {
                    this.toast_msg = msg;
                    $('#liveToast').toast('show');
                },
                setCurrentDateTime() {
                    const now = moment();
                    this.entryTime = now.format('YYYY-MM-DD');
                    this.entryHour = now.hour();
                    this.entryMin = now.minute();
                    this.combineEntryTime(); // 合併時間並更新 datas.entryTime
                },
                combineEntryTime() {
                    if (this.entryTime) {
                        const combinedTime = `${this.entryTime} ${String(this.entryHour).padStart(2, '0')}:${String(this.entryMin).padStart(2, '0')}:00`;
                        this.datas.entryTime = moment(combinedTime, 'YYYY-MM-DD HH:mm:ss').format('YYYY-MM-DDTHH:mm:ss');
                    } else {
                        this.datas.entryTime = null;
                    }
                },
                async submitForm() {
                    const tt = JSON.parse(JSON.stringify(this.datas));
                    console.log(JSON.stringify(this.datas))
                    //之後再加入驗證
                    try {
                        const response =
                            await axios.post(`${window.appRoot.full}Api/Entry/Update`, tt).then((res) => {
                                //const { data } = res;
                                alert('提交成功');
                            });
                        this.searchLogList();
                    } catch (error) {
                        console.error('提交失敗:', error);
                        alert('提交失敗');
                    }
                }, 
                async submitExitForm(_data) {
                    //this.datas
                    const tt = JSON.parse(JSON.stringify(_data));
                    //之後再加入驗證
                    console.log(tt)
                    try {
                        const response =
                            await axios.post(`${window.appRoot.full}api/Entry/UpdateExitDate`, tt).then((res) => {
                                const { data } = res;
                                console.log(data)
                                alert('提交成功');
                            });
                        this.searchLogList();
                    } catch (error) {
                        console.error('提交失敗:', error);
                        alert('提交失敗');
                    }
                },
                async getCampuses() {
                    // 發送 AJAX GET 請求以獲取所有校區數據
                    const res = await axios.get(`${window.appRoot.full}Api/Account/GetAllCampuses`)
                    this.campuses = res.data
                },
                async fetchEnum() {
                    const res = await axios.get(`${window.appRoot.full}Api/Common/EnumList`);
                    this.enums = res.data;
                },
                async searchLogList() {
                    const params = this.params;
                    const today = moment().format('YYYY-MM-DD');
                    params.EntryTimeStart = moment(today).startOf('day').format('YYYY-MM-DD HH:mm:ss');
                    params.EntryTimeEnd = moment(today).endOf('day').format('YYYY-MM-DD HH:mm:ss');
                    params.ExitTimeStart = null;
                    params.ExitTimeEnd = null;
                    //console.log(params)
                    // 發送帶有搜索參數的 GET 請求到 API
                    const res = await axios.get(`${window.appRoot.full}Api/Entry/EntryLogList`, { params });
                    // 更新 entryLogs 數據

                    this.entryLogs = res.data;
                },
                async datapickerInit() {
                    const vm = this;
                    $('#entryTime').datepicker({
                        format: 'yyyy-mm-dd',
                        autoclose: true,
                        todayHighlight: true
                    }).on('changeDate', function (e) {
                        vm.entryTime = e.format(0, 'yyyy-mm-dd');
                        vm.combineEntryTime()
                    });
                },
                formatDate(date) {
                    return moment(date).format('YYYY-MM-DD HH:mm:ss');
                },
                findPurpose(val) {
                    if (this.enums.purposes.length > 0 && val) {
                        const tt = this.enums.purposes.find(x => x.key == val);
                        if (tt) {
                            return tt.name;
                        }
                        return '無';
                    }
                },
            },
            created() { },
            async mounted() {
                // Initialize datepicker
                // this.toastMsg('123')

                await this.fetchEnum();
                await this.getCampuses();
                await this.datapickerInit();
                if (this.userIsAuthenticated) {
                    await this.searchLogList();
                }

            },
        });
    </script>
}